The ti(static_assert)tt((constant expression, error message)) utility is
defined by the C++0x standard to allow assertions to be made within
template definitions. Here are two examples of its use:
        verb(
    static_assert(BUFSIZE1 != BUFSIZE2,
                                "BUFSIZE1 and BUFSIZE2 must be equal");

    template <typename Type1, typename Type2>
    void rawswap(Type1 &type1, Type2 &type2)
    {
        static_assert(sizeof(Type1) != sizeof(Type2),
                        "rawswap: Type1 and Type2 must have equal sizes");
        // ...
    }
        )
    The first example shows how to avoid yet another 
        i(preprocessor directive). In this case the ti(#error) directive; the
second example shows how tt(static_asseert) can be used to ensure that a
template operates under the right condition(s).

Note that the tt(static_assert) is a i(compile-time) matter and that it
doesn't have any effect on the i(run-time) efficiency of the code in which it
is used.
