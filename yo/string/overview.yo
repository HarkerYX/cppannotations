In this section the available operations on strings are summarized. There are
four subparts here: the tt(string)-initializers, the tt(string)-iterators, the
tt(string)-operators and the tt(string)-member functions.

The member functions are ordered alphabetically by the name of the
operation. Below, tt(object) is a tt(string)-object, and tt(argument) is
either a tt(string const &) or a tt(char const *), unless overloaded versions
tailored to tt(string) and tt(char const *) parameters are explicitly
mentioned.

tt(Object) is used in cases where a tt(string) object is initialized or given
a new value. The entity referred to by tt(argument) always remains unchanged.

Furthermore, tt(opos) indicates an offset into the tt(object) string, tt(apos)
indicates an offset into the tt(argument) string. Analogously, tt(on)
indicates a number of characters in the tt(object) string, and tt(an)
indicates a number of characters in the tt(argument) string. 

Both tt(opos) and tt(apos) must refer to existing offsets, or an exception
will be generated. In contrast to this, tt(an) and tt(on) may exceed the
number of available characters, in which case only the available characters
will be considered.

With many members, default values are available for tt(on, an) and
tt(apos). Some members accept default values for tt(opos). By default,
tt(apos) and tt(opos) are 0, while tt(on) and tt(an) can by default be
interpreted as `the required number of characters to reach the end of the
string'; where needed this can be made explicit by providing the  
generic value tt(string::npos).

With members starting their operations at the end of the string object
proceeding backwards, the default value of tt(opos) becomes the index of the
object's em(last) character, while tt(on) refers to the
length of the substring em(ending) at the character at tt(opos). 

In the overviuw of member functions presented below it can be assumed that all
these parameters accept default values unless indicated otherwise. 

Of course, no defaults are accepted if a function requires additional
arguments beyond the ones normally offering default values.

Some members have specific overloaded versions for an initial argument of type
tt(char const *). However, note that the first argument can em(always) be of
type tt(char const *), using em(promotions) to convert the tt(char const *) to
a tt(std::string const &).

When streams are involved, tt(istr) indicates a stream from which information
is extracted, tt(ostr) indicates a stream into which information is inserted.

Several member functions accept em(iterators). At this point in the
Annotations it's a bit premature to discuss iterators, but for referential
purposes they nevertheless have to be mentioned. So, a forward reference is
used here: see section ref(ITERATORS) for a more detailed discussion of
em(iterators). Like tt(apos) and tt(opos), iterators must refer to
existing characters, or to a defined range of characters within the string
to which they refer.

Finally, note that all tt(string)-member functions returning indices in
tt(object) return the predefined constant ti(string::npos) if no
suitable index could be found.
