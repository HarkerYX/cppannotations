In this section the string members and string-related operations are
referenced. The subsections cover, respectively the string's initializers,
iterators, operators, and member functions. The following terminology is used
throughout this section:
    itemization(
    it() tt(object) is always a tt(string)-object;
    it() tt(argument) is a tt(string const &) or a tt(char const *) unless
indicated otherwise.  The contents of an tt(argument) never is modified by the
operation processing the tt(argument);
    it() tt(opos) refers to an offset into an tt(object) string;
    it() tt(apos) refers to an offset into an tt(argument);
    it() tt(on) represents a number of characters in an tt(object);
    it() tt(an) represents a number of characters in an tt(argument).
    )

Both tt(opos) and tt(apos) must refer to existing offsets, or an exception
(cf. chapter ref(EXCEPTIONS)) is generated. In contrast, tt(an) and tt(on) may
exceed the number of available characters, in which case only the available
characters will be considered.

Many members declare default values for tt(on, an) and tt(apos). Some members
declare default values for tt(opos). Default offset values are 0, the default
values of tt(on) and tt(an) is tt(string::npos), which can be interpreted as
`the required number of characters to reach the end of the string'.

COMMENT(>>>>>>>> NEXT <<<<<<<<<<<<<)

With members starting their operations at the end of the string object
proceeding backwards, the default value of tt(opos) becomes the index of the
object's em(last) character, while tt(on) refers to the
length of the substring em(ending) at the character at tt(opos).

In the overview of member functions presented below it can be assumed that all
these parameters accept default values unless indicated otherwise.

Of course, no defaults are accepted if a function requires additional
arguments beyond the ones normally offering default values.

Some members have specific overloaded versions for an initial argument of type
tt(char const *). However, note that the first argument can em(always) be of
type tt(char const *), using em(promotions) to convert the tt(char const *) to
a tt(std::string const &).

When streams are involved, tt(istr) indicates a stream from which information
is extracted, tt(ostr) indicates a stream into which information is inserted.

Several member functions accept em(iterators). At this point in the
Annotations it's a bit premature to discuss iterators, but for referential
purposes they nevertheless have to be mentioned. So, a forward reference is
used here: see section ref(ITERATORS) for a more detailed discussion of
em(iterators). Like tt(apos) and tt(opos), iterators must refer to
existing characters, or to a defined range of characters within the string
to which they refer.

Finally, note that all tt(string)-member functions returning indices in
tt(object) return the predefined constant ti(string::npos) if no
suitable index could be found.
