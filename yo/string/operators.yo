The following i(string operators) are available:
        itemization(
        itt(object = argument).
            quote(Assignment of tt(argument) to an existing string
tt(object).)
        itt(object = c).
            quote(Assignment of tt(char c) to tt(object).)
        itt(object += argument).
            quote(Appends tt(argument) to tt(object). tt(Argument) may also be
a tt(char) expression.)
        itt(argument1 + argument2).
            quote(Within expressions, tt(strings) may be added. At least one
term of the expression (the left-hand term or the right-hand term) should be a
tt(string) object. The other term may be a tt(string), a tt(char const *)
value or a tt(char) expression, as illustrated by the following example:)
            verb(
    void fun()
    {
        char const *asciiz = "hello";
        string first = "first";
        string second;

            // all expressions compile OK:
        second = first + asciiz;
        second = asciiz + first;
        second = first + 'a';
        second = 'a' + first;
    }
            )
        itt(object[string::size_type opos]).
            quote(The subscript operator may be used to retrieve tt(object)'s
individual characters, or to assign new values to individual characters of
tt(object). There is no range-checking. If
range checking is required, use the tt(at()) member function.)
        itt(argument1 == argument2).
            quote(The equality operator (ti(==)) may be used to compare a
tt(string) object to another tt(string) or tt(char const *) value. The ti(!=)
operator is available as well. The return value for each is a tt(bool). For
two identical strings tt(==) returns ti(true), and tt(!=) returns ti(false).)
        itt(argument1 < argument2).
            quote(The less-than operator may be used to compare the ordering
within the Ascii-character set of tt(argument1) and tt(argument2). The
operators tt(<=, >) and tt(>=) are available as well, each returning a
tt(bool) result.)
        itt(ostr) lshift() tt(object).
            quote(The insertion-operator (cf. section ref(CoutCinCerr))
may be used with tt(string) objects.)
        itt(istr) rshift() tt(object).
            quote(The extraction-operator may be used with tt(string)
objects. It operates analogously to the extraction of characters into a
character array, but tt(object) is automatically resized to the required
number of characters.)
        )
