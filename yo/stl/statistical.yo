    Before the statistical distributions and accompanying random number
generators can be used the tthi(random) header file must have been included.

The following statistical distributions are available (an example showing their
use is provided with each distribution presented below). More information
about the distributions mentioned below can be found at web-locations like
lurl(http://en.wikipedia.org/wiki/Bernoulli_distribution).

Although the STL offers various statistical distributions their functionality
is rather basic. The distributions allow us to obtain a random number from
these distributions, but 
    i(probility density function)s 
 or
    i(cumulative distribution function)s 
 are currently not provided by the STL. These functions (distributions as well
as the density and the cumulative distribution functions) are, however,
available in other libraries, like the 
    turl(boost math library)(http://www.boost.org/) (specifically:
     lurl(http://www.boost.org/doc/libs/1_44_0/libs/math/doc/sf_and_dist/\
          html/index.html)).

Below, ti(RNG) is used to indicate a em(Random Number Generator) and ti(URNG)
is used to indicate a em(Uniform Random Number Generator)

    All distributions offer the following members (em(result_type) refers to
the type name of the values returned by the distribution;
em(name_distribution) refers to the type name of the mathematical
distribution, e.g., tt(bernoulli_distribution)):
    itemization(
    itt(result_type operator()(RNG):)
       The next randomly generated value is returned, providing the member
        with a random number generator as its argument;
    itt(void reset():)
       Clears all of its cached values;
    itt(std::istream &operator<<(std::istream &in,
            distribution-name &object):)
       The parameters of the distribution are extracted from an
        tt(std::istream);
    itt(std::ostream &operator<<(std::ostream &out,
            bernoulli_distribution const &bd):)
        The parameters of the distribution are inserted into an
        tt(std::ostream)
    )








    it() ti(exponential_distribution<Type = double>)nl()
        tt(Type): the parameter of the exponential distribution.nl()
        Random integral values are generated according to the
        specified exponential distribution+nl()
        Constructor:
        itemization(
        itt(exponential_distribution<IntType, Type>(Type lambda =
        Type(1)))nl()
        )

    it() ti(normal_distribution<Type = double>)nl()
        tt(Type): the type of the generated random value (by default
        tt(double)). nl()
        Constructor:
        itemization(
        itt(normal_distribution<Type>(ReadType mean = Type(0),
            Type sigma = Type(1)))nl()
        )

    it() ti(poisson_distribution<IntType = int, RealType = double>)nl()
        tt(IntType): the type of the generated random value (by default
        tt(int)). nl()
        tt(RealType): the type of the parameter of the distribution (by default
        tt(double)). nl()
        Random integral values are generated that are distributed
        according to a poisson distribution with parameter tt(mean).
        Constructor:
        itemization(
        itt(poisson_distribution<IntType, RealType>(RealType mean =
        RealType(1)))nl()
        )

    it() ti(uniform_int<Type = int>)nl()
        tt(Type): the type of the generated random value (by default
        tt(int)). nl()
        Random integral values are generated that are uniformly
        distributed over a certain range.nl()
        Constructor:
        itemization(
        itt(uniform_int<Type>(Type min = 0, Type max = 9))nl()
        )
        Additional member:
        itemization(
        itt(Type operator()(RandomNumberGenerator), Type upper)nl()
            Random numbers are generated in the range rangett(0)(upper)
            (half-inclusive).
        )

    it() ti(uniform_real<Type = real>)nl()
        tt(Type): the type of the generated random value (by default
        tt(real)). nl()
        Random real values are generated that are uniformly
        distributed over a certain range.nl()
        Constructor:
        itemization(
        itt(uniform_real<Type>(Type min = Type(0), Type max = Type(1)))nl()
        )
        Note: the current implementation generates
            verb(
        GRN * (max - min) + min
            )
        which might not be what you'd expect.
    )

