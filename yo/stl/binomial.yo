The ti(binomial_distribution<IntType = int>) is used to determine the
probability of the number of successes in a sequence of tt(n) independent
success/failure experiments, each of which yields success with probability
tt(p).

The template type parameter tt(IntType) defines the type of the generated
random value, which must be an integral type. 

Defined types:
            verb(
    typedef IntType result_type;
    struct param_type
    {
      explicit param_type(IntType trials, double prob = 0.5);
      IntType t() const;                    // returns trials
      double p() const;                     // returns prob
    };
            )

Constructor, members and example:
    itemization(
    itt(binomial_distribution(IntType trials = 1, double prob = 0.5))
        constructs a binomial distribution for tt(trials) experiments, each
        having probability tt(prob) of success.
    itt(binomial_distribution(param_type const &param))
        constructs a binomial distribution according to the values stored in
        the tt(param) struct. 
    itt(IntType t() const)nl()
        returns tt(trials);
    itt(double p() const)nl()
        returns tt(prob);
    itt(param_type param() const)nl()
        returns the object's tt(param_type) structure;
    itt(void param(const param_type &param))
        redefines the parameters of the distribution;
    itt(result_type min() const)nl()
        returns the distribution's lower bound (tt(0));
    itt(result_type max() const)nl()
        returns the distribution's upper bound (tt(trials));
    itt(template<typename URNG> result_type operator()(URNG &urng))nl()
        returns the next random value from the binomial distribution
    itt(template<typename URNG> result_type operator())nl()
        tt((URNG &urng, param_type &param))nl()
        returns the next random value from a binomial distribution
        initialized by the provided tt(param) struct.
    it() Example:
        verbinclude(stl/examples/binomial.cc)
    )

