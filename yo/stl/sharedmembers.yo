The following hi(shared_ptr: operators) operators are defined for the class
tt(shared_ptr):
    itemization(
    ithtq(shared_ptr<>::operator=())
        (shared_ptr &shared_ptr<Type>operator=(shared_ptr<Type> &other))
        (This operator reduces the reference count of the left-hand side
object, deleting its memory when its count decays to zero, and sets its
pointer to the memory pointed at by right-hand side object, incrementing its
reference count.)

    ithtq(shared_ptr<>::operator bool() const)
        (shared_ptr &shared_ptr<Type>operator bool() const)
        (This operator returns tt(false) if the tt(shared_ptr) does not point
to memory (i.e., its tt(get()) member, see below, returns 0). Otherwise,
tt(true) is returned.)

    ithtq(shared_ptr<>::operator*())
        (Type &shared_ptr<Type>operator*())(This operator returns a reference to
the information stored in the tt(shared_ptr) object. It acts like a normal
pointer i(dereference) operator.)

    ithtq(shared_ptr<>::operator->())
        (Type *shared_ptr<Type>operator->())(This operator returns a pointer to
the information stored in the tt(shared_ptr) object. Through this operator
members of a stored object can be selected. For example:
            verb(
    shared_ptr<string> sp(new string("hello"));

    cout << sp->c_str() << endl;
            )
        )
    )

    The following i(member functions) are defined for tt(shared_ptr) objects:
    itemization(
    ithtq(shared_ptr<>::get())(Type *shared_ptr<Type>::get())(This member does
the same as tt(operator->()): it returns a pointer to the information stored
in the tt(shared_ptr) object. This pointer can be inspected: if it's zero the
tt(shared_ptr) object does not point to any memory.  This member cannot be used
to let the tt(shared_ptr) object point to (another) block of memory.)

    ithtq(shared_ptr<>::get_deleter())
        (Deleter &shared_ptr<Type>::get_deleter())(This member returns a
reference to the i(deleter class) object used by the tt(shared_ptr).)

    ithtq(shared_ptr<>::release())(Type *shared_ptr<Type>::release())
    (This member returns a pointer to the information stored in the
tt(shared_ptr) object, which loses the memory it pointed at (and changes into a
i(0-pointer)). The member can be used to transfer the information stored in
the tt(shared_ptr) object to a plain tt(Type) pointer.  It is the
i(responsibility of the programmer) to i(delete) the memory returned by this
member function.)

    ithtq(shared_ptr<>::reset())(void shared_ptr<Type>::reset(Type *))
    (This member may also be called em(without) argument, to delete the
memory stored in the tt(shared_ptr) object, or with a pointer to a
i(dynamically allocated) block of memory, which will thereupon be the
memory accessed by the tt(shared_ptr) object. This member function can
be used to assign a new hi(shared_ptr: assigning new content) block of
memory (new content) to an tt(shared_ptr) object.)

    ithtq(shared_ptr<>::swap())
        (void shared_ptr<Type>::swap(shared_ptr<Type> &&))
    (This member is used to swap two identically typed tt(shared_ptr)s.)

    ithtq(shared_ptr<>::unique() const)
        (bool shared_ptr<Type>unique() const)
        (This member returns tt(true) if the memory is referenced by the
current object only and returns tt(false) otherwise).

    ithtq(shared_ptr<>::use_count() const)
        (size_t shared_ptr<Type>use_count() const)
        (This member  returns the number of objects sharing the memory pointed
at by their data pointers.)
    )
