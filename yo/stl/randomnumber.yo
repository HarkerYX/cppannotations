The following generators are available:
center(
table(5)(lllll)(
rowline()
rowfive(Class template)(Integral/Floating point)(Quality)(Speed)(Size of state)
rowline()
rowfive(ti(linear_congruential))(Integral)(Medium)(Medium)(1)
rowfive(ti(subtract_with_carry))(Both)(Medium)(Fast)(25)
rowfive(mersenne_twister)(Integral)(Good)(Fast)(624)
rowline()
))

The tt(linear_congruential) random number generator computes
    center(tt(value)+subs(i+1)tt( = a * value)subs(i)tt( + c % m))
    Its template arguments are the data type to contain the generated random
values, the multiplier tt(a), the additive constant tt(c) and the modulo value
tt(m). E.g.,
        verb(
    linear_congruential<int, 10, 3, 13> lc;
        )
    The tt(linear_congruential) generator may also be seeded by providing its
constructor with a seeding-argument. E.g., tt(lc(time(0))).


The tt(subtract_with_carry) random number generator computes
    center(tt(value)+subs(i)tt( = value)+subs(i-s)tt( - value)+subs(i-r)\
        tt( - carry)+subs(i-1)tt( % m))
    Its template arguments are the data type to contain the generated random
values, the modulo value tt(m), the subtractive constants tt(s) and tt(r),
respectively. E.g.,
        verb(
    subtract_with_carry<int, 13, 3, 13> sc;
        )
    The tt(subtract_with_carry)  generator may also be seeded by providing its
constructor with a seeding-argument. E.g., tt(sc(time(0))).


The predefined tt(mersenne_twister mt19937) (predefined using a tt(typedef)
defined by the tt(random) hi(#include <random>) header file) is used in the
examples below. It can be constructed using ti(std::mt19937) tt(mt) or it can
be seeded using an argument (e.g., tt(std::mt19937 mt(time(0)))). Other ways
to initialize the tt(mersenne_twister) are byond the scope of the bf(C++)
Annotations (but see Lewis+hi(Lewis, P.A.W.) em(et al.)footnote(
    Lewis, P.A.W., Goodman, A.S., and Miller, J.M. (1969), A pseudorandom
number generator for the System/360, IBM Systems Journal, 8, 136-146.) (1969)).

The random number generators may also be seeded by calling their members
tt(seed()) which accepts an tt(unsigned long) or a generator function (e.g.,
tt(lc.seed(lc), lc.seed(mt))).

The random number generators implement members tt(min()) and tt(max())
returning, respectively, their minimum and maximum values (inclusive). If a
reduced range is required the generators can be nested in a function or class
changing its range.
