The basic form to hi(shared_ptr: initialization) initialize an tt(shared_ptr)
object is to provide its constructor with a block of memory allocated
by ti(operator new) operator. The generic form is:
        verb(
    shared_ptr<type [, deleter_type]> identifier(new-expression
            [, deleter = deleter_type()]);
        )
    The second (template) argument (tt(deleter(_type))) is optional and may
        hi(deleter class)
refer to a class/object handling the destruction of the allocated memory. It
is used in situations comparable to those encountered with tt(unique_ptr)
(cf. section ref(UNIQUENEW)).

    Here is an example initializing an tt(shared_ptr) pointing to a tt(string)
object:
        verb(
    shared_ptr<string> strPtr(new string("Hello world"));
        )
    Note the use of tt(operator new) in the above expression. The type
specified for the tt(shared_ptr) is identical to the type used in tt(new)
expression.

    All hi(shared_ptr: reaching members) member functions  available for
objects allocated by the tt(new) expression can be reached via the
tt(shared_ptr) as if it was a plain pointer to the dynamically allocated
object. For example, in the following program the text `tt(C++)' is inserted
behind the word `tt(hello)'. This example also shows the use of a copy
constructed shared pointer and it shows that following the copy construction
both objects point at the same information:
        verbinclude(stl/examples/sharedinsert.cc)
