When using tt(unique_ptr)s to stored arrays the dereferencing operator makes
little sense. Conversely, when arrays are handled by smart pointers they will
benefit from an index operator.

When using smart pointers (tt(unique_ptr) and tt(shared_ptr), see section
ref(SHAREDPTR)) to handle arrays the following additional syntax is available:
    itemization(
    it() To define an smart pointer for an array, the tt([]) notation is
used. E.g.,
        verb(
    unique_ptr<int[]> intArr(new int[3]);
        )
    it() The index operator is availabe. E.g.,
        verb(
    intArr[2] = intArr[0];
    it() The default deleter will use tt(delete[]).
        )
    )
