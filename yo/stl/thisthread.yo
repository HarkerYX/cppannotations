The ti(namespace this_thread)hi(this_thread) is defined within the tt(std)
namespace, and contains functions that uniquely identify the current thread of
execution. 

It offers the following members:
    itemization(
    itt(thread::id get_id() noexcept):
       returns an object of type tt(thread::id) that uniquely identifies the
        currently active thread of execution. For an active thread the
        returned tt(id)s is unique in that it 1:1 maps to the currently active
        thread, and is not returned for any other thread. A default tt(id) is
        returned when tt(get_id) is called for a thread that is currently not
        running.
    itt(void yield() noexcept):
       the implementation may call tt(yield) to
        reschedule. Cf. tt(thread::yield) in section ref(THREAD). 

    itt(void sleep_until(chrono::time_point<Clock, Duration> const &abs_time)
        noexcept):
       this function is defined as a function template (cf. chapter
        ref(TEMPLATES)), defining the template header tt(template <class
        Clock, class Duration>). Calling this function blocks the thread
        calling this function until the specified absolute time.


    itt(void sleep_for(chrono::duration<Rep, Period> const &rel_time) noexcept;
       template <class Rep, class Period>
         void sleep_for(const chrono::duration<Rep, Period>& rel_time) noexcept;
    }
  }


chrono::time_point<Clock, Duration>

      Effects: Blocks the calling thread for the absolute timeout (30.2.4) specified by abs_time.
      Synchronization: None.
template <class Rep, class Period>
  void sleep_for(const chrono::duration<Rep, Period>& rel_time) noexcept;
      Effects: Blocks the calling thread for the relative timeout (30.2.4) specified by rel_time.
      Synchronization: None.

