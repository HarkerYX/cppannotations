bf(C++) has traditionally offered the (with the advent of the i(C++ standard)
deprecated) smart pointer class tt(std::)ti(auto_ptr<Type>). This class did
not support emi(move semantics) although when one tt(auto_ptr) object was
assigned to another, the right-hand object lost the information it originally
pointed at. 

The tt(std::unique_ptr), available since the C++-0x standard does not have 
tt(auto_ptr)'s drawbacks and consequently using tt(auto_ptr) is now
deprecated. 

The following em(restrictions) hi(auto_ptr: restrictions) apply to
tt(auto_ptrs):
    itemization(
    it() the tt(auto_ptr) class does not support em(move semantics);
    it() the tt(auto_ptr) object cannot be used to point to
        i(arrays of objects);
    it() the tt(auto_ptr) cannot be used as a data type of abstract
containers.
    )

No further coverage of the tt(auto_ptr) class is offered by the bf(C++)
Annotations. Existing software should be modified to use tt(unique_ptr)s,
newly designed software should avoid using tt(auto_ptr) objects.
