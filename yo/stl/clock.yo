The C++11 standard offers several predefined emi(clock) types that can be used
in combination with multi-threaded programs. It is also possible to define
your own clock-type, which must then satisfy the requirements defined in
clause 20.11.3 of the C++11 standard. 

The predefined clocks are defined in the tt(std::chrono) namespace.  Before
using the predefined clocks the tthi(chrono) header file must have been
included.

Clocks define several types (like tt(period, duration), and tt(time_point),
and a member hi(now)tt(static time_point now()) which may be used by
multi-threaded programs. 

The class ti(system_clock) represents the `wall clock' time, using the
system's real time clock. In addition to tt(now) the class tt(system_clock)
offers two more static members:
    itemization(
    ithtq(to_time_t)(static time_t to_time_t(time_point const &timePoint))
       (returns a tt(time_t) value representing the same point in time as
        tt(timePoint) (see the next section for a description of
        tt(time_point));) 
    ithtq(from_time_t)(static time_point from_time_t(time_t seconds))
       (returns a tt(time_point) value representing the same point in time as
        tt(time_t).)
    )

The class ti(steady_clock) implements a clock whose time increases in parallel
with with increase of real time.

The class ti(high_resolution_clock) implements the computer's fastest clock 
(i.e., the clock having the shortest timer-tick period). 
 
An example of their use is given in the next section.


