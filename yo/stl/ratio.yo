The i(time unit) that is used when defining time points or time intervals 
is specified using types defined by hi(ratio)tt(std::ratio):
a em(class template) expecting one or two em(template arguments). E.g.,
tt(ratio<1>) defines a time unit of a second, tt(ratio<60>) a time unit of a
minute, and tt(ratio<1, 1000>) a time unit of one milli second. 

The tt(ratio) class template is defined in the tthi(ratio) header file, which
is automatically read when including the tt(chrono) header file. 

Once a tt(ratio) type has been defined (e.g., tt(typedef ratio<1, 1000>
milli)) or becomes available (e.g., as tt(seconds::period), see below), then
the value of the template's first argument (e.g., 1) can be retrieved as
ti(num) (e.g., tt(seconds::period::num)), while the value of the template's
second argument (e.g., 1000) can be retrieved as ti(den) (e.g.,
tt(seconds::period::den)).

A large number of predefined tt(ratio) types exist. They can be used instead
of the more cumbersome tt(ratio<x>) or tt(ratio<x, y>) specification:
    center(
    table(2)(ll)(
    rowline()
    row(cell(i(yocto))  cell(10+sups(-24)))
    row(cell(i(zepto))  cell(10+sups(-21)))
    rowline()
    row(cell(i(atto))  cell(10+sups(-18)))
    row(cell(i(femto)) cell(10+sups(-15)))
    row(cell(i(pico))  cell(10+sups(-12)))
    row(cell(i(nano))  cell(10+sups(-9)))
    row(cell(i(micro)) cell(10+sups(-6)))
    row(cell(i(milli)) cell(10+sups(-3)))
    row(cell(i(centi)) cell(10+sups(-2)))
    row(cell(i(deci))  cell(10+sups(-1)))
    row(cell(i(deca))  cell(10+sups(1)))
    row(cell(i(hecto)) cell(10+sups(2)))
    row(cell(i(kilo))  cell(10+sups(3)))
    row(cell(i(mega))  cell(10+sups(6)))
    row(cell(i(giga))  cell(10+sups(9)))
    row(cell(i(tera))  cell(10+sups(12)))
    row(cell(i(peta))  cell(10+sups(15)))
    row(cell(i(exa))   cell(10+sups(18)))
    rowline()
    row(cell(i(zetta))   cell(10+sups(21)))
    row(cell(i(yotta))   cell(10+sups(24)))
    rowline()
    )
    )
 (the definitions of the types tt(yocto, zepto, zetta) and tt(yotto) require
the use of integral constants exceeding 64 bits, and although these constants
are defined in the C++11 standard, they are not available on 64 bit or smaller
architectures.)
