The class ti(duration) is defined in the tt(std::chrono) namespace. Like
tt(ratio) it is a class template. The class template tt(duration) requiring
two template type arguments: a numeric type tt(Value) (e.g., tt(int64_t) or
tt(size_t)) to contain the duration's value and a time-unit, specified using
tt(ratio).

Before using the class tt(std::chrono::duration) the tthi(chrono) header file
must have been included.

In addition to the copy constructor (and overloaded assignment operator) the
following constructors are available:
    itemization(
    itt(constexpr duration()):
        the default duration defines a duration of zero time units.
    itt(constexpr explicit duration(Value const &value)):
        a specific duration of tt(value) time units;
    )

Using the second constructor, a duration of 30 minutes can be defined using,
e.g., tt(duration<size_t, ratio<60>> halfHour(30)). Instead of explicitly
defining a tt(duration) type, it is also possible to use the following
predefined tt(duration) types:
    center(
    table(2)(ll)(
    rowline()
    row(cell(i(nanoseconds))    cell(tt(duration<int64_t, nano>)))
    row(cell(i(microseconds))   cell(tt(duration<int64_t, micro>)))
    row(cell(i(milliseconds))   cell(tt(duration<int64_t, milli>)))
    row(cell(i(seconds))        cell(tt(duration<int64_t>)))
    row(cell(i(minutes))        cell(tt(duration<int64_t, ratio<60>>)))
    row(cell(i(hours))          cell(tt(duration<int64_t, ratio<3600>>)))
    rowline()
    )
    )
Using, e.g., the tt(minutes) definition, a duration of 30 minutes can simply
be specified using tt(minutes halfHour(30)).

The em(value) that is stored inside a tt(duration) is obtained using the
class's hi(count)tt(constexpr Value count() const) member. For tt(halfHour)
this would return 30, not 1800, as the time unit itself is obtained as the
hi(period)tt(duration<Value, Unit>::period) type. 

