As discussed, bf(C++) inherits the struct concept and extends it with the
class concept. Structs are still used in bf(C++), mainly to store and pass
around aggregates of different data types. A commonly term for these structs
is emi(plain old data) (i(pod)).

The standard pod concept in bf(C++) completely matches bf(C)'s struct
concept. The C++0x standard, however, relaxes these requirements to some
extent. Under the C++0x standard pod is considerd to be a class or struct
having the following characteristics:
    itemization(
    it() it has a i(trivial default constructor).nl()
       If a type has some emi(trivial member) then the type (or its base
        class(es), cf. chapter ref(INHERITANCE)) do not explicitly define that
        member. Rather, it will be supplied by the compiler. A trivial default
        constructor leaves all its non-class data members unitialized and will
        call the default constructors of all its class data members. A class
        having a trivial default constructor does not define any constructor
        at all (nor does/do its base class/classes) or defines the default
        constructor using the default constructor syntax introduced in section
        ref(DEFAULTED);
    it() it has a i(trivial copy constructor).nl()
        A trivial copy constructor will byte-wise copy the non-class data
        members from the provided existing class object and will use the copy
        constructors to initialize its class data members from the provided
        existing class object;
    it() it has a i(trivial overloaded assignment operator).nl()
       A trivial assignment operator will byte-wise copy the non-class data
        members from the provided right-hand class object and will use the
        overloaded assignment operators to assign a new value to its class
        data members using the corresponding members of the provided
        right-hand class object;
    it() it has a i(trivial destructor).nl()
       A trivial destructor calls the destructors of its class-type data
        members.
    )

A emi(standard-layout) class or struct
    itemization(
    it() has only non-static data members that are themselves showing
        the standard-layout;
    it() has the same access control (public, private, protected) for all its
        non-static members;
    it() has no virtual functions (cf. chapter ref(POLYMORPHISM));
    it() has no virtual base classes (cf. chapter ref(POLYMORPHISM));
    it() has only base classes (cf. chapter ref(INHERITANCE)) that are of
        standard-layout type;
    it() has no base classes of the same type as the first defined non-static
        member;
    it() only one of its (in)direct base classes has non-static members.
    )
