Derived classes may redefine base class members.  Let's assume that a vehicle
classification system must also cover trucks, consisting of two parts: the
front part, the tractor, pulls the rear part, the trailer. Both the 
tractor and the trailer have their own weights, and the tt(weight) function
should return the combined weight.

The definition of a tt(Truck) starts with a class definition. Our initial
tt(Truck) class is derived from tt(Auto) but it is then expanded to hold one
more tt(size_t) field representing the additional weight information. Here we
choose to represent the weight of the front part of the truck in the tt(Auto)
class and to store the weight of the trailer in an additional field:
        verb(
    class Truck: public Auto
    {
        size_t d_trailer_weight;

        public:
            Truck();
            Truck(size_t tractor_wt, size_t speed, char const *name,
                  size_t trailer_wt);

            void setWeight(size_t tractor_wt, size_t trailer_wt);
            size_t weight() const;
    };

    Truck::Truck(size_t tractor_wt, size_t speed, char const *name,
                 size_t trailer_wt)
    :
        Auto(tractor_wt, speed, name)
    {
        d_trailer_weight = trailer_wt;
    }
        )
    Note that the class tt(Truck) now contains two functions already
present in the base class tt(Auto): tt(setWeight) and tt(weight).
    itemization(
    it() The redefinition of tt(setWeight) poses no problems: this
function is simply redefined to perform actions which are specific to a
tt(Truck) object.
    it() The redefinition of tt(setWeight), however, will
    hi(hiding: base class  members) hi(base class: hiding members) em(hide)
tt(Auto::setWeight). For a tt(Truck) only the tt(setWeight) function having
two tt(size_t) arguments can be used.
    it() The tt(Vehicle)'s tt(setWeight) function remains available for a
tt(Truck), but it must now be 
 hi(member function: called explicitly) called em(explicitly), as
tt(Auto::setWeight) is hidden from view.  This latter function is hidden,
even though tt(Auto::setWeight) has only one tt(size_t) argument. To implement
tt(Truck::setWeight) we could write:
         verb(
    void Truck::setWeight(size_t tractor_wt, size_t trailer_wt)
    {
        d_trailer_weight = trailer_wt;
        Auto::setWeight(tractor_wt);     // note: Auto:: is required
    }
        )
    it() Outside of the class tt(Auto::setWeight) is
accessed using the i(scope resolution operator). So, if a tt(Truck truck) needs
to set its tt(Auto) weight, it must use
        verb(
    truck.Auto::setWeight(x);
        )

    it() An alternative to using the scope resolution operator is to add a
member having the same function prototype as the base class member to the
derived class's interface. This derived class member could be implemented
inline to call the base class member. E.g., we add the following member to the
tt(class Truck):
        verb(
    // in the interface:
    void setWeight(size_t tractor_wt);

    // below the interface:
    inline void Truck::setWeight(size_t tractor_wt)
    {
        Auto::setWeight(tractor_wt);
    }
        )
    Now the single argument tt(setWeight) member function can be used by
tt(Truck) objects without using the scope resolution operator. As the
function is defined inline, no overhead of an additional function call is
involved.

    it() hi(derived class: using declaration)hi(using: in derived classes) To
prevent hiding the base class members a tt(using) declaration may be added to
the derived class interface. The relevant section of tt(Truck)'s class
interface then becomes:
        verb(
    class Truck: public Auto
    {
        public:
            using Auto::setWeight;
            void setWeight(size_t tractor_wt, size_t trailer_wt);
    };
        )
    A using declaration imports (all overloaded versions of) the mentioned
member function directly into the derived class's interface. If a base class
member has a signature that is identical to a derived class member then
compilation will fail (a tt(using Auto::weight) declaration cannot be added to
tt(Truck)'s interface). Now code may use tt(truck.setWeight(5000)) as well as
tt(truck.setWeight(5000, 2000)).

    Using declarations obey access rights. To prevent non-class members from
using tt(setWeight(5000)) without a scope resultion operator but allowing
derived class members to do so the tt(using Auto::setWeight) declaration
should be put in the class tt(Truck)'s private section.

    it() The function tt(weight) is also already defined in tt(Auto), as
it was inherited from tt(Vehicle). In this case, the class tt(Truck) should
em(redefine) this member function to allow for the extra (trailer) weight in
the tt(Truck):
         verb(
    size_t Truck::weight() const
    {
        return
            (                           // sum of:
                Auto::weight() +     //   tractor part plus
                d_trailer_weight        //   the trailer
            );
    }
        )
    )
    Example:
        verb(
    int main()
    {
        Land veh(1200, 145);
        Truck lorry(3000, 120, "Juggernaut", 2500);

        lorry.Vehicle::setWeight(4000);

        cout << endl << "Truck weighs " <<
                        lorry.Vehicle::weight() << endl <<
            "Truck + trailer weighs " << lorry.weight() << endl <<
            "Speed is " << lorry.speed() << endl <<
            "Name is " << lorry.name() << endl;
    }
        )
    

    The class tt(Truck) was derived from tt(Auto). However, one might question
this class design. Since a truck is conceived of as a combination of an
tractor and a trailer it is probably better defined using 
composition. This changes our point of view from a tt(Truck) em(being) an
tt(Auto) (and some strangely appearing data members) to a tt(Truck)
em(consisting of) an tt(Auto) (the tractor) and a tt(Vehicle) (the trailer).
tt(Truck)'s interface will be very specific, not requiring users to study
tt(Auto)'s and tt(Vehicle)'s interfaces and it opens up possibilities for
defining `road trains': tractors towing multiple trailers. Here is an example
of such an alternate class setup:
        verb(
    class Truck
    {
        Auto d_lorry;
        Vehicle d_trailer;      // use vector<Vehicle> for road trains

        public:
            Truck();
            Truck(size_t tractor_wt, size_t speed, char const *name,
                  size_t trailer_wt);

            void setWeight(size_t tractor_wt, size_t trailer_wt);
            void setTractorWeight(size_t tractor_wt);
            void setTrailerWeight(size_t trailer_wt);
            size_t weight() const;
            size_t tractorWeight() const;
            size_t trailerWeight() const;
        // consider:
            Auto const &tractor() const;
            Vehicle const &trailer() const;
    };
        )
