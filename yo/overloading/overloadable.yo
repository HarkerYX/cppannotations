The following hi(overloadable operators) operators can be overloaded:
        verb(
    +       -       *       /       %       ^       &       |
    ~       !       ,       =       <       >       <=      >=
    ++      --      <<      >>      ==      !=      &&      ||
    +=      -=      *=      /=      %=      ^=      &=      |=
    <<=     >>=     []      ()      ->      ->*     new     new[]
    delete  delete[]
        )
    When `textual' alternatives of operators are available (e.g., tt(and) for
tt(&&)) then they are overloadable too.

    Several of these operators may only be overloaded as member functions
    hi(operator overloading: within classes only) em(within) a class. This
holds true for the tt('='), the tt('[]'), the tt('()') and the tt('->')
operators. Consequently, it isn't possible to redefine, e.g., the assignment
operator globally in such a way that it accepts a tt(char const *) as an
tt(lvalue) and a tt(String &) as an em(rvalue). Fortunately, that isn't
necessary either, as we have seen in section ref(ConversionOperators).

    Finally, the following operators are not overloadable at all:
        verb(
    .       .*      ::      ?:      sizeof  typeid
        )
