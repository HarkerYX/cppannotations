As discussed in the previous section the scanner must have access to the
parser's tt(d_val__) data member. Therefore the Scanner class may define a
tt(Semantic &d_val) member, which is initialized to tt(Semantic d_val__) 
received by the Scanner's constructor:
        verb(
    inline Scanner::Scanner(Parser::STYPE__ &semval)    
    :                       // or: Semantic &semval
        d_semval(semval)
    {}
        )

The scanner (generated by bf(flex)(1))hi(flex) recognizes input patterns,
returns Parser tokens (e.g., Parser::INT), and returns a semantic value when
applicable. E.g., when recognizing a tt(Parser::INT) the rule is:
        verb(
    {
        *d_semval = new Int(yytext);
        return Parser::INT;
    }
        )

Note that, as the tt(Semantic) constructor expects but one argument, 
automatic promotion from tt(Base *) to tt(Semantic) can be used in the
assignments to tt(*d_semval).

The tt(IDENTIFIER)'s semantic value is obtained as follows:

[a-zA-Z_][a-zA-Z0-9_]*  {
                *d_semval = new Text(yytext);
                return Parser::IDENTIFIER;
            }

