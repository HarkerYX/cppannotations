The C++0x standard adds handling of i(regular expressions) to the
language. Regular expressions were already available in bf(C++) via its bf(C)
heritage as bf(C) has always offered functions like
    bf(regcomp)(3)hi(regcomp) and bf(regexec)(3),hi(regexec), which are used,
e.g. by the ti(Pattern) class of the
    url(Bobcat library)(http://bobcat.sourceforge.net).\
    hi(Bobcat library)hi(http://bobcat.sourceforge.net)

Regular expressions are extensively documented elsewhere (e.g., bf(regex)(7),
i(Friedl, J.E.F)
    url(Mastering Regular Expressions)(http://oreilly.com/catalog/), O'Reilly)
    and the reader is referred to these sources for a refresher on the topic
of regular expressions.

The C++0x standard adds native object based support for regular expressions
by defining several new classes and other facilities. Currently, however,
regular expressions are not yet supported by the tt(g++) library and therefore
in this section only the basic building blocks the C++0x standard offers to
handle regular expressions are mentioned. Once regular expressions actually
become available this section will be updated to cover the actually available
features.

Eventually, regular expressions will be represented by objects of the class
ti(regex). Once a regular expression has been defined a function
ti(regex_search) can be called to process the regular expression. This
function expects arguments representing, respectively, the text against which
the regular expression will be matched; an object of the class ti(cmatch)
representing the results of the matching operation and an object of the class
tt(regex) representing the used regular expression. Alternatively, a function
ti(regex_replace) will be available to perform textual replacements based on
regular expressions.

Regular expressions as offered by the C++ standard can be used after including
the header ti(regex):
        verb(
    #include <regex>
        )

Note again that regular expressions are currently not yet supported by the
tt(g++) library.
