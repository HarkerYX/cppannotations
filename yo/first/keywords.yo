bf(C++)'s  i(keywords) are a superset of bf(C)'s  keywords. Here is a
list of all keywords of the language:
    COMMENT(table generated by src/keywordsort.cc)
        verb(
alignas  char32_t     enum     namespace        return        typedef  
alignof  class        explicit new              short         typeid   
and      compl        export   noexcept         signed        typename 
and_eq   concept      extern   not              sizeof        union    
asm      const        false    not_eq           static        unsigned 
auto     const_cast   float    nullptr          static_assert using    
axiom    constexpr    for      operator         static_cast   virtual  
bitand   continue     friend   or               struct        void     
bitor    decltype     goto     or_eq            switch        volatile 
bool     default      if       private          template      wchar_t  
break    delete       import   protected        this          while    
case     do           inline   public           thread_local  xor      
catch    double       int      register         throw         xor_eq   
char     dynamic_cast long     reinterpret_cast true                   
char16_t else         mutable  requires         try                    
    )

    Notes:
    itemization(
    it() The ti(export) keyword is removed from the language under the C++11
standard, but remains a keyword, reserved for future use.
    it()  the emi(operator keywords): tt(and, and_eq, bitand, bitor, compl,
not, not_eq, or, or_eq, xor) and tt(xor_eq) are symbolic alternatives for,
respectively, tt(&&, &=, &, |, ~, !, !=, ||, |=, ^) and tt(^=).
    it() C++11 also recognizes the special identifiers tt(final) and
tt(override). These identifiers are special in the sense that they acquire
special meanings when declaring classes or polymorphic functions. Section
ref(FINAL) provides further details.
    )

Keywords can only be used for their intended purpose and cannot be used as
names for other entities (e.g., variables, functions, class-names, etc.). In
addition to keywords i(identifiers starting with an underscore) and living in
the emi(global namespace) (i.e., not using any explicit namespace or using the
mere tt(::) namespace specification) or living in the em(std namespace) are
 i(reserved identifiers) in the sense that their use is a prerogative of the
implementor.
