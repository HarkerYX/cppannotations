bf(C++)'s  i(keywords) are a superset of bf(C)'s  keywords. Here is a
list of all keywords of the language:
        verb(
   and        const     float          nullptr      static unsigned          
and_eq   const_cast       for         operator static_cast    using 
   asm     continue    friend               or      struct  virtual 
  auto      default      goto            or_eq      switch     void 
bitand       delete        if          private    template volatile 
 bitor           do    inline        protected        this  wchar_t 
  bool       double       int           public       throw    while 
 break dynamic_cast      long         register        true      xor 
  case         else   mutable reinterpret_cast         try   xor_eq 
 catch         enum namespace           return     typedef          
  char     explicit       new            short      typeid          
 class       extern       not           signed    typename          
 compl        false    not_eq           sizeof       union          
    )                                   
    Notes:
    itemization(
    it() The ti(nullptr) keyword is defined in the i(C++-0x standard) 
(not yet available in tt(g++ 4.4)).
    it()  the emi(operator keywords): tt(and, and_eq, bitand, bitor, compl,
not, not_eq, or, or_eq, xor) and tt(xor_eq) are symbolic alternatives for,
respectively, tt(&&, &=, &, |, ~, !, !=, ||, |=, ^) and tt(^=).
    )

Keywords can only be used for their intended purpose and cannot be used as
names for other entities (e.g., variables, functions, class-names, etc.). In
addition to keywords i(identifiers starting with an underscore) are 
    i(reserved identifiers) in the sense that their use is a prerogative of
the implementor.

COMMENT(
    and       and_eq  asm     auto
    bitand    bitor   bool    break
    case      catch   char    class   compl
              const const_cast continue
    default   delete  do      double  dynamic_cast
    else      enum    explicit extern
    false     float   for     friend
    goto
    if        inline  int
    long
    mutable
    namespace new               not     not_eq
    operator  or                or_eq
    private   protected         public
    register  reinterpret_cast  return
    short     signed  sizeof  static static_cast
              struct   switch
    template  this   throw   true    try
              typedef typeid  typename
    union     unsigned    using
    virtual   void    volatile
    wchar_t   while
    xor       xor_eq
END COMMENT)
