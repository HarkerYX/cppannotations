The bf(C++) for-statement is identical to bf(C)'s for-statement:
        verb(
    for (init; cond; inc)
        statement
        )
    In many cases, however, the initialization, condition and increment parts
are fairly obvious as in situations where all elements of an array or vector
must be processed. Many languages offer the tt(foreach) statement for that and
bf(C++) offers the tt(std::for_each) generic algorithm (cf. section
ref(FOREACH)).

The i(C++0x standard) adds a new tt(for) statement syntax to this. The new
syntax can be used to process each element of a i(range). Three types of
ranges are distinguished:
        itemization(
        it() Plain arrays (e.g., tt(int array[10]));
        it() Standard containers (or comparable) (cf. chapter
            ref(CONTAINERS));
        it() Ranges contained in a tt(std::pair) (cf. section ref(PAIR), e.g.,
                tt(std::pair subRange(array + 1, array + 8))).
        )

For ranges the i(C++0x standard) offers the following i(for-statement) syntax
in addition to the standard for-statement syntax:
        verb(
    // assume int array[30]
    for (int &element: array)
        statement
        )
    this syntax defines an tt(int &element) whose lifetime and scope is
restricted to the lifetime of the for-statement. It refers to each of the
subsequent elements of tt(array) at each new iteration of the for-statement,
starting with the first element of the range.

Range based for-loops are currently not yet available in tt(g++).
