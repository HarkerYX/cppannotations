The bf(C) language defines the initializer list as a curly braces separated
series of values, possibly themselves containing i(initializer lists). In
bf(C) these initializer lists are commonly used to initialize arrays and
structs.

bf(C++) extends this concept in the C++0x standard by introducing the
em(type)
    ti(initializer_list<Type>) where tt(Type) is replaced by the type name of
the values used in the initializer list. Initializer lists in bf(C++) are,
like their counterparts in bf(C), recursive, so they can also be used with
mult-dimensional arrays, structs and classes.

    Like in bf(C), initializer lists consist of a list of values surrounded by
curly braces. But unlike bf(C), em(functions) can define initializer list
parameters. E.g.,
        verb(
    void arrayValues(std::initializer_list<int> iniValues)
    {
        int array[] = iniValues;
    }
        )
    A function like tt(arrayValues) could be called as follows:
        verb(
    arrayValues({2, 3, 5, 7, 11, 13});
        )
    The initializer list appears as an argument which is a curly braces
separated list of values. Due to the recursive nature of initializer lists a
two-dimensional array could be initialized as follows:
        verb(
    void array2Values(std::initializer_list<int> iniValues)
    {
        int array[2][] = iniValues;
    }

    array2Values({{1, 2}, {2, 3}, {3, 5}, {4, 7}, {5, 11}, {6. 13}});
        )
    Initializer lists' values are constant expressions and cannot be modified.
