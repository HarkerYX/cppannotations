Standard ASCII-C strings are delimited by double quotes, supporting i(escape
sequence)s like tt(\n, \\) and tt(\"). In some cases it is useful to avoid
escaping strings (e.g., in the context of XML). To this end, the i(C++0x
standard)  offers emi(raw string literals).

Raw string literals start with an tt(R), followed by a double quote, followed
by a label (which is an arbitrary sequence of characters not equal to tt([)),
followed by tt([). The raw string ends at the closing bracket tt(]), followed
by the label which is in turn followed by a double quote. E.g.:
        verb(
    R"[A Raw \ "String"]"
    R"delimiter[Another \ Raw "[String]]delimiter"
        )
    In the first case, everything between the tt("[) and tt(]") markers is
part of the string. Escape sequences aren't supported so tt(\ ") defines three
characters: a backslash, a blank character and a double quote. The second
example shows a string between the markers tt("delimiter[) and tt(]delimiter")

Raw string literals are not yet supported by the tt(g++) compiler.
