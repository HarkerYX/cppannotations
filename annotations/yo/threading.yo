includefile(threading/intro)

COMMENT(

//sect(Shared States)
//includefile(threading/shared)

END)

sect(Handling time (absolute and relative))
includefile(threading/time)

    subsect(Units: the class 'ratio')
    includefile(threading/ratio)

    lsubsect(DURATION)(Amounts of time: the class 'duration')
    includefile(threading/duration)

    subsect(Clocks measuring time)
    includefile(threading/clock)

    lsubsect(TIMEPOINT)(Points in time: the class 'time_point')
    includefile(threading/timepoint)

    subsect(Converting time to NTBSs)
    includefile(threading/ntbs)

lsect(THREADS)(Multi Threading)
includefile(threading/threading)

    subsect(The namespace `std::this_thread')
    includefile(threading/thisthread)

    lsubsect(THREAD)(The class `std::thread')
    includefile(threading/thread)

        subsubsection(Static data and threads: thread_local)
        includefile(threading/threadlocal)

        subsubsection(Exceptions and join())
        includefile(threading/joining)

    lsubsect(MUTEX)(Synchronization (mutexes))
    includefile(threading/mutex)

        subsubsection(Initialization in multi-threaded programs)
        includefile(threading/initialization)

    lsubsect(LOCKS)(Locks and lock handling)
    includefile(threading/locks)

        subsubsect(Deadlocks)
        includefile(threading/deadlocks)

    subsect(Event handling (condition variables))
    includefile(threading/events)

        lsubsubsect(CONDVAR1)(The class 'std::condition_variable')
        includefile(threading/conditionvar)

        lsubsubsect(CONDVAR2)(The class 'std::condition_variable_any')
        includefile(threading/conditionany)

COMMENT()

        lsubsubsect(CONDEX)(An example using condition variables)
        includefile(threading/conditionex)

    lsubsect(FUTURE)(Storing a shared return object: the class `future')
    includefile(threading/future)
    
    subsect(Sharing a shared return object: the class `shared_future')

    lsubsect(PACKAGE)
        (Interfacing functions and 'futures': the class `packaged_task')

    subsect(The class `std::promise')

    lsubsect(ASYNC)(Starting a new thread: the function `std::async')

