The standard implementation of an expression like tt(one + two + three), where
the objects are, 
e.g., vectors, requires repeated index expression evaluations of the resulting
temporary object. I.e., the standard implementation requires us to compute
        verb(
    tmp[idx] = one[idx];
    tmp[idx] += two[idx];
    tmp[idx] += three[idx];
        )
    for each separate index of our objects.

Expression templates allow us to postpone the index evaluations, so that in
fact we compute
        verb(
    tmpvar = one[idx];
    tmpvar += two[idx];
    tmpvar += three[idx];
    tmp[idx] = tmp;
        )
