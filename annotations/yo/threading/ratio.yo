Threads may postpone their actions until a specific point in time or for a
specific amount of time. A time unit is defined using the class template 
tt(std::ratio). 

Before the class tt(ratio) can be used, the tthi(ratio) header file must be
included. However, the tt(ratio) header file is automatically included when
including the tthi(chrono) header file.

The class template tt(ratio) expects two integral (for all practical purposes:
positive) template arguments, defining, respectively, the numerator and
denominator of a time unit. By default, the denomincator equals
1, resulting in  the tt(ratio's) first argument (the numerator) being
interpreted as the tt(ratio's) number of seconds. 

E.g., tt(ratio<1>) defines a time unit of one second; tt(ratio<60>) defines a
time unit of 60 seconds, so it defines a unit of a minute; and tt(ratio<1,
1000>) defines a unit of 1/1000 second, so it defines a unit of one milli
second.

A tt(ratio's) numerator is directly accessible as its tt(num)hi(ratio: num)
field. A tt(ratio's) denominator is directly accessible as its
tt(den)hi(ratio: den) field.  

A rather large number of predefined tt(ratio) types exist. They can be used
instead of the more cumbersome tt(ratio<x>) or tt(ratio<x, y>) specification:
    center(
    table(2)(ll)(
    rowline()
    row(cell(i(yocto))  cell(10+sups(-24)))
    row(cell(i(zepto))  cell(10+sups(-21)))
    rowline()
    row(cell(i(atto))  cell(10+sups(-18)))
    row(cell(i(femto)) cell(10+sups(-15)))
    row(cell(i(pico))  cell(10+sups(-12)))
    row(cell(i(nano))  cell(10+sups(-9)))
    row(cell(i(micro)) cell(10+sups(-6)))
    row(cell(i(milli)) cell(10+sups(-3)))
    row(cell(i(centi)) cell(10+sups(-2)))
    row(cell(i(deci))  cell(10+sups(-1)))
    row(cell(i(deca))  cell(10+sups(1)))
    row(cell(i(hecto)) cell(10+sups(2)))
    row(cell(i(kilo))  cell(10+sups(3)))
    row(cell(i(mega))  cell(10+sups(6)))
    row(cell(i(giga))  cell(10+sups(9)))
    row(cell(i(tera))  cell(10+sups(12)))
    row(cell(i(peta))  cell(10+sups(15)))
    row(cell(i(exa))   cell(10+sups(18)))
    rowline()
    row(cell(i(zetta))   cell(10+sups(21)))
    row(cell(i(yotta))   cell(10+sups(24)))
    rowline()
    )
    )
 (em(note:) the definitions of the types tt(yocto, zepto, zetta) and tt(yotta)
use integral constants exceeding 64 bits, and although these constants are
defined in the C++11 standard, they are not available on 64 bit or smaller
architectures.)


