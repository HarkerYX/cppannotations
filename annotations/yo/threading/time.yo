The bf(C) programming language offered tools like bf(sleep)(3) and
bf(select)(2) to suspend program execution for a certain amount of time.

When developing multi threaded programs situations are frequently encountered
where a thread's actions must temporarily be. E.g., a program configuring a
network interface may want to show that it is busy by displaying a sequence of
dots at the terminal, one dot per second, until the network interface has been
configured. The simple example of a multi-threaded program, shown earlier,
shows how this can be realized.

The thread displaying de dots waits for a second before displaying
the next dot. Once the main thread has finished its task it somhow notifies
the thread displaying the dots that it should stop. In the simple example a
tt(bool) variable is shared among the two threads, but this may involve a
superfluous waiting period of one second, as the thread showing the dots might
just have started its tt(sleep(1)) call, when the main thread finishes its
work. 

The STL offers dedicated classes operating on time which work well in
combination with threads, the topic of the next section (ref(THREADS)), but
which can also be used in many other situations. 


