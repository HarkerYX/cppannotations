The hi(namespace this_thread)hi(this_thread) tt(namespace std::this_thread)
contains functions that are uniquely associated with the currently running
thread.

Inside the tt(std::this_thread) namespace several free functions are defined,
providing information about the current thread or that can be used to control
its behavior:
    itemization(
    ithtq(get_id)(thread::id this_thread::get_id() noexcept)
       (returns an object of type tt(thread::id) that identifies the currently
active thread of execution. For an active thread the returned tt(id) is unique
in the sense that it maps 1:1 to the currently active thread, and is not
returned by any other thread. If a thread is currently not running
hi(id)tt(thread::id) is returned by the tt(std::thread) object's tt(get_id)
member.)

    ithtq(yield)(void yield() noexcept)
        (when a thread calls tt(this_thread::yield()) the current thread is
briefly suspended, allowing other (waiting) threads to start. It can be used
in, e.g., em(thread pools) to inform the operating system that the thread must
remain available in memory, so it can continue later on. To continue a thus
suspended thread the controlling thread (which has access to the yielding
tt(thread) object) can use .)
    ithtq(sleep_for)
       (void sleep_for(chrono::duration<Rep, Period> const &relTime)
            noexcept) 
       (this function is defined as a function template, defining the template
        header tt(template <typename Rep, typename Period>). The template's
        types are derived from the actual tt(relTime) argument that is passed
        to the function, and should not explicitly be specified. This function
        could be called as, e.g.,
   verb(
sleep_for(seconds(5));
        )
       Calling this function blocks the thread calling this function during the
        specified time interval, starting at the point in time the function is
        called.)
    ithtq(sleep_until)
        (void sleep_until(chrono::time_point<Clock, Duration> const &absTime)
            noexcept)
       (this function is also defined as a function template, defining the
        template header tt(template <typename Clock, typename Duration>). The
        tt(Clock) and tt(Duration) types are derived from the actual
        tt(absTime) argument that is passed to the function, and should not
        explicitly be specified. This function could be called as, e.g.,
   verb(
sleep_until(system_clock::now() + seconds(5));
        )
       Calling this function blocks the thread until the specified absolute
        point in time.)
    )



