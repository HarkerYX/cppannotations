Asynchronous providers produce asynchronous return objects which may or may
not share their shared state with other asynchronous return objects. 

Before using the class hi(future) tt(std::future) the tthi(future) header file
must be included.

Objects of the class template hi(future)tt(std::future) represent asynchronous
return objects which may not share their shared state with other asynchronous
return objects. The class's template type parameter defines the type of the
tt(future) object's result, which may be tt(void) or a reference to a return
type. 

A tt(future's) object result is a value or an exception. The tt(future) object
receives its result through member functions of objects that share the
tt(future) object's shared state.

By default a tt(future) object has no shared state. A tt(future) object
containing a shared state can be created by members of asynchronous providers
(such as a tt(std::promise) (cf. section ref(PROMISE)), or by the move
constructor. In these cases it shares its shared state with the original
asynchronous provider. The class tt(future) does not offer a copy constructor
or overloaded assignment operator.

Some of tt(future)'s members may return a value of the strongly typed
enumeration hi(future_status)tt(std::future_status). This enumeration defines
three symbolic constants: tt(future_status::ready, future_status::timeout,)
and tt(future_status::deferred). 

Error conditions may be returned by tt(future_error) exceptions. These error
conditions are represented by the values of the strongly typed enumeration 
    hi(future_errc)tt(std::future_errc) defining the symbolic constants 
tt(future_errc::broken_promise, future_errc::future_already_retrieved, 
future_errc::promise_already_satisfied,) and tt(future_errc::no_state).

In this section the members of the class template tt(future) are
described. Examples of its use are given in subsequent sections.


The class tt(future) has the following constructors:
    itemization(
    itt(future())
        quote(The default constructor constructs an tt(future) object that
            does not refer to a shared state. Its tt(valid) member returns
            tt(false).)

    itt(future(future &&tmp) noexcept)
        quote (The move constructor is available. Its tt(valid) member 
            returns what tt(tmp.valid()) would haved returned prior to the
            constructor invocation. After calling the move constructor
            tt(tmp.valid()) returns tt(false).)
    )

It has the following members (member functions of the class tt(future) do not
synchronize with themselves or with member functions of the class
tt(shared_future)).

    itemization(
    itt(future &operator=(future &&tmp))
        quote(The move assignment operator grabs the information from the
            tt(tmp) object; following this, tt(tmp.valid()) returns
            tt(false).) 

    itt(std::shared_future<ResultType> share() &&)
        quote(This member turns an r-value reference to a
            tt(future<ResultType>) into a tt(std::shared_future<ResultType>)
            (see section ref(SHAREDFUTURE)). After calling this function, the
            tt(future's valid) member returns tt(false).)

    itt(ResultType get())
        quote(This member first calls the member tt(wait) (see below), after
            which the value which is stored in the shared state is
            returned. With tt(future<Type>) specifications the returned value
            is the moved shared value if tt(Type) supports move assignment,
            otherwise a copy is returned.  With tt(future<Type &>)
            specifications a tt(Type &) is returned, with tt(future<void>)
            specifications nothing is returned. If the shared value is an
            exception, it is thrown instead of returned. After calling this
            member the tt(future) object's tt(valid) member returns tt(false).)

    itt(bool valid() const)
        quote(Returns tt(true) only if tt(*this) refers to a shared state.  If
            tt(valid) returns tt(false) only the tt(future's) destructor and
            move constructor can safely be called. When other members are
            called while tt(valid) returns tt(false) a
            hi(future_error)tt(std::future_error) exception is thrown (having
            the value hi(no_state)tt(future_errc::no_state)).)

    itt(void wait() const)
        quote(This member blocks until the shared state is ready.)

COMMENT(future_status?)
    itt(future_status wait_for(chrono::duration<Rep, Period> const &rel_time) 
        const)
        quote(This member template derives the template types tt(Rep) and
            tt(Period) from the actually specified duration (cf. section
            ref(DURATION)). If the shared state contains a deferred function
            nothing happens. Otherwise tt(wait_for) blocks
COMMENT((30.6.8)) 
            until the shared state is ready or until the amount of time
            specified by tt(rel_time) has expired. Possible return values are:
            itemization(
            itt(future_status::deferred) if the shared state contains a deferred
                function;
            itt(future_status::ready) if the shared state is ready;
            itt(future_status::timeout) if the function is returning because the
                amount of time specified by tt(rel_time) has expired. 
            ))

    itt(future_status wait_until(chrono::time_point<Clock, Duration> const
                                                        &abs_time) const)
        quote(This member template derives the template types tt(Clock) and
            tt(Duration) from the actually specified tt(abs_time) (cf. section
            ref(TIMEPOINT)). If the shared state contains a deferred function
            nothing happens. Otherwise tt(wait_until) blocks until the shared
            state is ready or until the point in time specified by
            tt(abs_time) has expired. Possible return values are:
           itemization(
            itt(future_status::deferred) if the shared state contains a
                deferred function;
            itt(future_status::ready) if the shared state is ready;
            itt(future_status::timeout) if the function is returning because
                the point in time specified by tt(abs_time) has expired. 
            ))
)

And the class tt(future<ResultType>) declares the following friends:
        verb(
    std::promise<ResultType>
        )
and
        verb(
    template<typename Function, typename... Args>
        future<typename result_of<Function(Args...)>::type> 
        async(std::launch, Function &&fun, Args &&...args);
        )


