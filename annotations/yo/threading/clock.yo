The C++11 standard offers several predefined emi(clock) types, measuring time.
All predefined clocks are defined in the tt(std::chrono) namespace.  

Before using the predefined clocks the tthi(chrono) header file must be
included. When including tt(chrono) the header file tthi(ratio) is also
included.

A clock type must be specified when defining points in time using
tt(time_point) (covered by the next section). It is also possible to define
your own clock type, which is not covered by the annotations() (clause
20.11.3 of the C++11 standard lists the requirements for a clock type).

All predefined clocks provide several type definitions and a member
tt(now). If tt(ClockType) is a predefined clock type, then
    itemization(
    ithtq(duration)(std::chrono::ClockType::duration)
        (the tt(duration) type which 
         used by tt(ClockType) (e.g., tt(std::chrono::nanoseconds)))
    ithtq(period)(std::chrono::ClockType::period)
        (the time period used by tt(ClockType) (e.g.,
         tt(std::ratio::nano))) 
    ithtq(rep)(std::chrono::ClockType::rep)
        (defining the value type used by tt(ClockType) to store duration
         values (e.g., tt(int64_t)))
    ithtq(time_point)(std::chrono::ClockType::time_point)
        (time points used by tt(ClockType) 
         (e.g., tt(std::chrono::time_point<system_clock, duration>)))
    )

    In addition to these types predefined clocks offer a member
    itemization(
    ithtq(clock: now)(static std::chrono::time_point 
                      std::chrono::ClockType::now()) 
       (returns the tt(time_point) representing the current time)
    )

These are the predefined clock types:
    itemization(
    ithtq(system_clock)(std::chrono::system_clock)
       (the `wall clock' time, using the system's real time clock. 
        In addition to tt(now) the class tt(system_clock)
        offers these two static members:
        itemization(
        itht(system_clock: to_time_t)
            (static time_t std::chrono::system_clock::to_time_t)
                quote(tt((std::chrono::time_point const &
                timePoint)))
            quote(a tt(time_t) value representing the same point in time as
                tt(timePoint);)
        itht(system_clock: from_time_t)
            (static std::chrono::time_point
                std::chrono::system_clock::from_time_t)
                quote(tt((time_t seconds)))
            quote(a tt(time_point) value representing the same point in time
                as tt(time_t).)
        )
        )
    ithtq(steady_clock)(std::chrono::steady_clock) 
       (a clock whose time increases in parallel with the increase of real
        time.) 
    ithtq(high_resolution_clock)(std::chrono::high_resolution_clock) 
       (the computer's fastest clock (i.e., the clock having the shortest
        timer-tick period). In practice this is the clock used to implement
        the tt(system_clock).)  
    )

As an example: to access the current time you could use:
        verb(
    auto point = std::chrono::system_clock::now();
        )








