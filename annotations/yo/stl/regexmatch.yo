The regular expression matching function tt(std::regex_match)hi(regex_match)
returns tt(true) if the regular expression represented by its provided
tt(regex) argument fully matches the provided target text. The following
overloaded variants of this function are available:
    itemization(
    ittq(bool regex_match(BidirIter first, BidirIter last,
                  std::match_results &results,
                  std::regex const &re))
       (tt(BidirIter) is a bidirectional iterator. The range 
        rangett(first, last) defines the target text. The match results are
        returned in tt(results);)

    ittq(bool regex_match(BidirIter first, BidirIter last, std::regex const
        &re)) 
       (this function behaves like the previous function, but does not
        return the results of the matching process in a tt(match_results)
        object;)

    ittq(bool regex_match(char const *target,
                  std::match_results &results, std::regex const &re))
       (this function behaves like the first overloaded variant, using
        the characters in tt(target) as its target text;)
        
    ittq(bool regex_match(char const *str, std::regex const &re))
       (this function behaves like the previous function but does not return
        the match results;)

    ittq(bool regex_match(std::string const &target,
                  std::match_results &results, std::regex const &re))
       (this function behaves like the first overloaded variant, using
        the characters in tt(target) as its target text;)

    ittq(bool regex_match(std::string const &str, std::regex const &re))
       (this function behaves like the previous function but does not return
        the match results;)

    itt(bool regex_match(std::string const &&, std::match_results &, 
                         std::regex &) = delete)
       (the tt(regex_match) function does not accept temporary tt(string)
        objects as target strings, as this would result in invalid string
        iterators in the tt(match_result) argument.)
    )

