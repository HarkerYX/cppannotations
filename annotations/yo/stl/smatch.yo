Once a tt(regex) object is available, it can be used to match the regular
expression against some target text. Several functions are available
performing such matches, like em(regex_match, regex_search,) and
em(regex_replace), which are covered in the next section. 

Usually the result of a regular expression matching process is made available
in an object of the class tt(std::match_results),hi(match_results) covered in
this section. Before using the tt(regex_match) class presented in this section
the tthi(regex) header file must be included.

Comparable to the predefined specializations of tt(regex), predefined
specializations of tt(match_results) exist. These specializations differ in
the types of iterators or pointers that ar used by the tt(match_results)
class. They are:
    itemization(
    itt(cmatch): defines tt(match_results<char const *>), using a tt(char
        const *) type of `iterator';
    itt(wcmatch): defines tt(match_results<wchar_ const *>), using a
        tt(wchar_t const *) type of `iterator';
    itt(smatch): defines tt(match_results<std::string::const_iterator>), using
        a tt(std::string::const_iterator) type of iterator;
    itt(wsmatch): defines tt(match_results<std::wstring::const_iterator>),
        using a tt(std::wtring::const_iterator) type of iterator;
    )

bf(Constructors)

The class tt(match_results) only offers the standard constructors: the
default, copy, and move constructors are available. In fact, the default
constructor defines one parameter, for which a default argument is defined.
The parameter is an tt(Allocator const &), by default initialized with the
default allocator. Objects of the class tt(match_results) receive their
match-related information through their member functions, usually in
combination with one of the predefined functions implementing the matching
algorithms.

bf(Member functions)

    itemization(
    ittq(match_results &operator=)
       (The copy and move assignment operators are available;)

    itt(std::string const &operator[](size_t idx = 0) const)
       (A (const) reference to sub-match tt(idx) are returned. By default this
		is a reference to the full match. If tt(idx >= size()) (see below) a
		reference to an empty subrange of the target string is returned. The
		behavior of this member is undefined if tt(ready()) (see below)
		returns tt(false);)

    itt(Iterator begin() const)
       (An iterator to the first sub-match is returned. tt(Iterator) is a
		const-iterator for tt(const match_results) objects;)

    itt(Iterator cegin() const)
       (An iterator to the first sub-match is returned. tt(Iterator) is a
		const-iterator;)

    itt(Iterator cend() const)
       (An iterator pointing beyond the last sub-match is
		returned. tt(Iterator) is a const-iterator;)

    itt(Iterator end() const)
       (An iterator pointing beyond the last sub-match is
		returned. tt(Iterator) is a const-iterator for tt(const match_results)
		objects;)

	ittq(ReturnType format(Parameters) const)
	   (This member requires a fairly extensive description, which would break
		the flow of the current list of members. Therefore it's covered in the
		link(next section)(FORMAT) (section ref(FORMAT));)

    ittq(allocator_type get_allocator() const)
       (The object's allocator is returned;)

    ittq(bool empty() const)
       (This member returns tt(true) if the tt(match_results) object contains
		no matches (which is also true after using the default
		constructor). Otherwise tt(false) is returned;)

    ittq(int length(size_t idx = 0) const)
       (The length of sub-match tt(idx) is returned. By default the length of
		the full match is returned. If tt(idx >= size()) (see below) 0 is
		returned;)

    itt(size_type max_size() const)
       (The maximum number of sub-matches that can be contained in a
		tt(match_results) object is returned. This is an implementation
		dependent constant value;)

    ittq(int position(size_t idx = 0) const)
       (The offset of the first character of sub-match tt(idx) is returned. By
		default the position of the first character of the full match is
		returned. If tt(idx >= size()) (see below) -1 is returned;)

    itt(std::string const &prefix() const)
       (A (const) reference ending at the first character of the full match is
		returned;)

    itt(bool ready() const)
       (No match results are available from a default constucted
        tt(match_results) object. It receives its match results from one of
        the mentioned matching functions. This member functions returns
        tt(true) once the match results are available, and tt(false)
        otherwise.)

    itt(size_type size() const)
       (The number of sub-matches is returned. E.g., with a regular expression
		tt((abc)|(def)) and target tt(defcon) three submatches are reported:
		the total match (def), the empty text for tt((abc)), and tt(def) for
		the tt((def)) marked sub-expression. Note that when multipliers are
		used only the last match counts, and is reported. E.g., for the
		pattern tt((a|b)+) and target tt(aaab) two sub-matches are reported:
		the total match tt(aaab), and the last match (tt(b));)

    itt(std::string str(size_t idx = 0) const)
       (The characters defining sub-match tt(idx) are returned. By default
		this is the full match. If tt(idx >= size()) (see below) an empty
		string returned;)

    itt(std::string const &suffix() const)
       (A (const) reference starting beyond the last character of the  full
		match is returned;)

    itt()
       (
    itt()
       (
    itt()
       (
    itt()
       (
    itt()
       (
    itt()
       (
    )
