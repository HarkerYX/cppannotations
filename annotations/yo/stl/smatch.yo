Once a tt(regex) object is available, it can be used to match the regular
expression against some target text. Several functions are available
performing such matches, like em(regex_match, regex_search,) and
em(regex_replace), which are covered in the next section. 

Usually the result of a regular expression matching process is made available
in an object of the class tt(std::match_results),hi(match_results) covered in
this section. Before using the tt(regex_match) class presented in this section
the tthi(regex) header file must be included.

Comparable to tt(regex's) specializations, specializations of
tt(match_results) exist. These specializations differ in the types of
iterators or pointers that are used by tt(match_results). They are:
    itemization(
    ittq(cmatch)
       (defines tt(match_results<char const *>), using a tt(char const *) type
        of `iterator';)
    ittq(wcmatch)
       (defines tt(match_results<wchar_ const *>), using a tt(wchar_t const *)
        type of `iterator';)
    ittq(smatch)
       (defines tt(match_results<std::string::const_iterator>), using a
        tt(std::string::const_iterator) type of iterator;)
    ittq(wsmatch)
       (defines tt(match_results<std::wstring::const_iterator>), using a
        tt(std::wstring::const_iterator) type of iterator.)
    )

bf(Constructors)

The class tt(match_results) only offers the standard default, copy, and move
constructors. The default constructor actually defines one parameter, for
which a default argument is defined.  The parameter is an tt(Allocator const
&), by default initialized with the default allocator. Objects of the class
tt(match_results) receive their match-related information through their member
functions, usually in combination with one of the predefined functions
implementing the matching algorithms.

bf(Member functions)

    itemization(
    ittq(match_results &operator=)
       (The copy and move assignment operators are available;)

    ittq(std::string const &operator[](size_t idx = 0) const)
       (Returns a (const) reference to sub-match tt(idx). By default this is a
        reference to the full match. If tt(idx >= size()) (see below) a
        reference to an empty sub-range of the target string is returned. The
        behavior of this member is undefined if tt(ready()) (see below)
        returns tt(false);)

    ittq(Iterator begin() const)
       (Returns an iterator to the first sub-match. tt(Iterator) is a
        const-iterator for tt(const match_results) objects;)

    ittq(Iterator cegin() const)
       (Returns an iterator to the first sub-match. tt(Iterator) is a
        const-iterator;)

    ittq(Iterator cend() const)
       (Returns an iterator pointing beyond the last sub-match. tt(Iterator)
        is a const-iterator;)

    ittq(Iterator end() const)
       (Returns an iterator pointing beyond the last sub-match. tt(Iterator)
        is a const-iterator for tt(const match_results) objects;)

    ittq(ReturnType format(Parameters) const)
       (As this member requires a fairly extensive description, it would break
        the flow of the current overview. Therefore it's covered in the
        link(next section)(FORMAT) (section ref(FORMAT));)

    ittq(allocator_type get_allocator() const)
       (Returns the object's allocator;)

    ittq(bool empty() const)
       (Returns tt(true) if the tt(match_results) object contains
        no matches (which is also true after using the default
        constructor). Otherwise returns tt(false);)

    ittq(int length(size_t idx = 0) const)
       (Returns the length of sub-match tt(idx). By default the length of
        the full match is returned. If tt(idx >= size()) (see below) 0 is
        returned;)

    ittq(size_type max_size() const)
       (Returns the maximum number of sub-matches that can be contained in a
        tt(match_results) object. This is an implementation dependent constant
        value;)

    ittq(int position(size_t idx = 0) const)
       (Returns the offset of the first character of sub-match tt(idx). By
        default the position of the first character of the full match is
        returned. If tt(idx >= size()) (see below) -1 is returned;)

    ittq(std::string const &prefix() const)
       (Returns a (const) reference ending at the first character of the full
        match;)

    ittq(bool ready() const)
       (No match results are available from a default constructed
        tt(match_results) object. It receives its match results from one of
        the mentioned matching functions. Returns tt(true) once the match
        results are available, and tt(false) otherwise.)

    ittq(size_type size() const)
       (Returns the number of sub-matches. E.g., with a regular expression
        tt((abc)|(def)) and target tt(defcon) three submatches are reported:
        the total match (def), the empty text for tt((abc)), and tt(def) for
        the tt((def)) marked sub-expression. Note that when multipliers are
        used only the last match counts, and is reported. E.g., for the
        pattern tt((a|b)+) and target tt(aaab) two sub-matches are reported:
        the total match tt(aaab), and the last match (tt(b));)

    ittq(std::string str(size_t idx = 0) const)
       (Returns the characters defining sub-match tt(idx). By default this is
        the full match. If tt(idx >= size()) (see below) an empty string
        returned;)

    ittq(std::string const &suffix() const)
       (Returns a (const) reference starting beyond the last character of the
        full match;)

    ittq(void swap(match_results &other) noexcept)
       (Swaps the current tt(match_results) object with tt(other). Also
        available as a free function: tt(void swap(match_results &lhs,
        match_results &rhs)), swapping tt(lhs) and tt(rhs).)
    )










