em(Generic lambda expressions) hi(lamda: generic) use tt(auto) to define their
parameters. When used, an appropriate lambda expression is created by looking
at the actual types of arguments. Since they are generic, they can be used
inside one function with different types of arguments. Here is an example
(assuming all required headers and namespace declaration):
    verbinclude(-ns4 //code examples/genlambda.cc)
    The generic lambda function is defined in lines 3 through 6, and is
assigned to the tt(lambda) identifier. Then, tt(lambda) is passed to
tt(accumulate) in lines 12 and 13. In line 12 it is instantiated to add
tt(int) values, in line 13 to add tt(std::string) values: the same tt(lambda)
is instantiated to two completely different functors, which are only locally
available in tt(main).

As a prelude to our coverage of templates (in particular chapter
ref(TEMPLATES)), a generic lambda expression is equivalent to a class
template. To illustrate: the above example of a generalized lambda function
could also be implemented using a class template like this:
        verb(
    struct Lambda
    {
        template <typename LHS, typename RHS>
        auto operator()(LHS const &lhs, RHS const &rhs) const 
        {
            return lhs + rhs;
        }
    };
    auto lambda = Lambda{};
        )
    One of the consequences of this identity is that using tt(auto) in the
lambda expression's parameter list obeys the rules of template argument
deduction (cf. section ref(TEMPFUNARGS)), which are somewhat different from
the way tt(auto) normally operates.


Another extension is how lambda expressions capture outer scope variables. In
the C++11 standard capture was used either by value or by reference. A
consequence of this is that an outer scope variable of a type that only
supports move construction cannot be passed by value to a lambda
function. This restriction was dropped, allowing variables to be initialized
from arbitrary expressions. This not only allows move-initialization of
variables in the lambda introducer, but variables may here also be initialized
if they do not have a correspondingly named variable in the lambda
expression's outer scope. In this case initializer expressions can be used as
shown in this example:
        verb(
    auto fun = [value = 1] 
               {
                   return value;
               };
        ) 
    This lambda function (of course) returns 1: the declared capture deduces
the type from the initializer expression as if tt(auto) had been used.
    
    To use move-initialization tt(std::move) should be used. E.g.,
        verb(
    std::unique_ptr<int> ptr(new int(10));
    auto fun = [value = std::move(ptr)] 
               {
                   return *value;
               };
        )

In generic lambda expressions the keyword tt(auto) indicates that the compiler
determines which types to use when the lambda function is instantiated. A
generic lamda expression therefore em(is) a class template (cf. chapter
ref(TEMPCLASS)), even though it doesn't look like one. As an example, the
following lambda expression defines a generic class template, which can be
used as shown:
        verb(
    char const *target = "hello";

     auto lambda =         
        [target](auto const &str)
        {
            return str == target;
        };
        
        vector<string> vs{stringVectorFactory()};

        find_if(vs.begin(), vs.end(), lambda);
        )
    This works fine, but if the programmer defines tt(lambda) this way then
he/she should be prepared for complex error messages if the types of the
derefenced iterators and lambda's (silently assumed) tt(str) type don't match.
