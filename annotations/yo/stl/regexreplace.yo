The family of tt(std::regex_replace)hi(regex_replace)  functions
uses a regular expression to perform substitution on a sequence
of characters. Their functionality closely resembles the functionality of the 
tt(match_results::format) member discussed in section ref(FORMAT). The
following overloaded variants are available:
    itemization(
    ittq(OutputIt regex_replace(OutputIter out, 
                        BidirIter first, BidirIter last,
                        std::regex const &re, std::string const &fmt))
       (tt(OutputIter) and tt(BidirIter) are, respectively, output- and
        bidirectional iterators. The characters in the range rangett(first,
        last) are copied to out, replacing any sequences that match tt(re)
        according to the format string defined by tt(fmt).  First the match
        result's tt(prefix()) is copied to tt(out), followed by the formatted
        replacement string as defined by tt(fmt). Having processed all
        sub-matches the match result's tt(suffix) is copied to tt(out);)

    ittq(OutputIt regex_replace( OutputIter out, BidirIter first, BidirIter
                        last, std::regex const &re, char const *fmt))
       (This variant behaves like the first variant;)

    ittq(std::string regex_replace(std::string const &str,
                   std::regex const &re, std::string const &fmt))
       (This variant returns a tt(std::string) containing the modified text,
        and expects a tt(std::string) containing the target text. Other than
        that, it behaves like the first variant;)

    ittq(std::string regex_replace(std::string const &str,
                   std::regex const &re, char const *fmt))
       (This variant behaves like the previous variant;)

    ittq(std::string regex_replace(char const *str,
                   std::regex const &re, std::string const &fmt))
       (This variant behaves like the previous variant;)

    ittq(std::string regex_replace(char const *str,
                   std::regex const &re, char const *fmt))
       (This variant behaves like the previous variant;)
    )
