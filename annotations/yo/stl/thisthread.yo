The ti(namespace this_thread)hi(this_thread) is defined within the tt(std)
namespace, and contains functions that uniquely identify the current thread of
execution. 

It offers the following members:
    itemization(
    ithtq(get_id)(thread::id get_id() noexcept)
       (returns an object of type tt(thread::id) that uniquely identifies the
        currently active thread of execution. For an active thread the
        returned tt(id)s is unique in that it 1:1 maps to the currently active
        thread, and is not returned for any other thread. A default tt(id) is
        returned when tt(get_id) is called for a thread that is currently not
        running.)
    ithtq(yield)(void yield() noexcept)(
       the implementation may call tt(yield) to
        reschedule. Cf. tt(thread::yield) in section ref(THREAD).)
    ithtq(sleep_for)
       (void sleep_for(chrono::duration<Rep, Period> const &relTime)
            noexcept) 
       (this function is defined as a function template, defining the
        template header tt(template <typename Rep, typename Period>). The template's
        types are derived from the actual tt(relTime) argument that is passed
        to the function, and should not explicitly be specified. This function
        could be called as, e.g., 
       verb(
    sleep_for(seconds(5));
        )
       Calling this function blocks the thread calling this function during the
        specified time interval, starting at the point in time the function is
        called.)
    ithtq(sleep_until)
        (void sleep_until(chrono::time_point<Clock, Duration> const &absTime)
            noexcept)
       (this function is also defined as a function template, defining the
        template header tt(template <typename Clock, typename Duration>). The
        tt(Clock) and tt(Duration) types are derived from the actual
        tt(absTime) argument that is passed to the function, and should not
        explicitly be specified. This function could be called as, e.g.,
       verb(
    sleep_until(system_clock::now() + seconds(5));
        )
       Calling this function blocks the thread until the specified absolute
        point in time.)
    )



