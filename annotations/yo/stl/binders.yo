em(Binders) hi(binder) are function adaptors converting
 hi(binary function object) binary function objects to
 hi(unary function object) unary function objects. They do so by em(binding)
one parameter of a binary function object to a constant value. For example, if
the first parameter of the tt(minus<int>) function object is bound to 100,
then the resulting value is always equal to 100 minus the value of the
function object's second argument.

Originally two binder adapters (ti(bind1st) and ti(bind2nd)) binding,
respectively, the first and the second argument of a binary function were
defined. However, in the next i(C++17) standard tt(bind1st) and tt(bind2nd)
are likely to be removed, as they are superseded by the more general tt(bind)
binder. tt(Bind) itself is likely to become a deprecated function, as it can
easily be replaced by (generic) em(lambda functions) (cf. section
ref(LAMBDA)).

As tt(bind1st) and tt(bind2nd) are still available, a short example showing
their use (concentrating on tt(bind2nd)) is provided. A more elaborate
example, using tt(bind) is shown next. Existing code should be modified so
that either tt(bind) or a lambda function is used.

Before using tt(bind) (or the namespace tt(std::placeholders), see below) the
tthi(functional) header file must be included.

Here is an example showing how to use tt(bind2nd) to count the number of
strings that are equal to a string (tt(target)) in a vector of strings
(tt(vs)) (it is assumed that the required headers and tt(using namespace std)
have been specified): 
        verb(
    count_if(vs.begin(), vs.end(), bind2nd(equal_to<string>(), target));
        )
    In this example the function object tt(equal_to) is instantiated for
strings, receiving tt(target) as its second argument, and each of the strings
in tt(vs) are passed in sequence to its first argument. In this particular
example, where equality is being determined, tt(bind1st) could also have been
used. 

The tt(bind) adaptor expects a function as its first argument, and then any
number of arguments that the function may need. Although an unspecified number
of arguments may be specified when using tt(bind) it is not a variadic
function the way the bf(C) programming language defines them. tt(Bind) is a
em(variadic function template), which are covered in section ref(VARIADIC).

By default tt(bind) returns the function that is specified as its first
argument, receiving the remaining arguments that were passed to tt(bind) as
its arguments. The function returned by tt(bind) may then be called. Depending
on the way tt(bind) is called, calling the returned function may or may not
required arguments. 

Here is an example:
        verb(
    int sub(int lhs, int rhs);      // returns lhs - rhs
    bind(sub, 3, 4);                // returns a function object whose
                                    // operator() returns sub(3, 4)
        )
 Since tt(bind's) return value is a function object it can be called:
        verb(    bind(sub, 3, 4)();)
 but more commonly tt(bind's) return value is assigned to a variable, which
then represents the returned function object, as in:
        verb(
    auto functor = bind(sub, 3, 4); // define a variable for the functor
    cout << functor() << '\n';      // call the functor, returning -1.
        )
    
    Instead of specifying the arguments when using tt(bind), emi(placeholders)
(cf. section ref(PLACEHOLDERS)) can be specified. Explicit argument values
must then be specified when the returned functor is called. Here are some
examples:
        verb(
    using namespace placeholders;
    auto ftor1 = bind(sub, _1, 4);  // 1st argument must be specified
    ftor1(10);                      // returns 10 - 4 = 6

    auto ftor2 = bind(sub, 5, _1);  // 2nd argument must be specified
    ftor2(10);                      // returns 5 - 10 = -5
        
    auto ftor3 = bind(sub, _1, _2); // Both arguments must be specified
    ftor3(10, 2);                   // returns 10 - 2 = 8 
        
    auto ftor3 = bind(sub, _2, _1); // Both arguments must be specified
    ftor3(10, 2);                   // but in reversed order: returns
                                    // 2 - 10 = -8
        )
    Alternatively, the first argument can be the address of a member
function. In that case, the first argument specifies the object for which the
member function will be called, while the remaining arguments specify the
arguments (if any) that are passed to the member function. Some examples:
        verb(
    struct Object                   // Object contains the lhs of a
    {                               // subtraction operation
        int d_lhs;
    
        Object(int lhs)
        :
            d_lhs(lhs)
        {}
        int sub(int rhs)            // sub modifies d_lhs
        {
            return d_lhs -= rhs;
        }
    };

    int main()
    {
        using namespace placeholders;
    
        Object obj(5);
    
        auto ftor = bind(&Object::sub, obj, 12);
        cout << ftor() << '\n';     // shows -7
        cout << obj.d_x << '\n';    // obj not modified, bind uses a copy

        auto ftor = bind(&Object::sub, ref(obj), 12);
        cout << ftor() << '\n';     // shows -7
        cout << obj.d_x << '\n';    // obj modified, cout shows -7
    }
        )
    Note the use of tt(ref) in the second tt(bind) call: here tt(obj) is
passed by reference, forwarding tt(obj) itself, rather than its copy, to the
tt(for2) functor. This is realized using a facility called em(perfect
forwarding), which is discussed in detail in section ref(PERFECT).

If the return type of the function that is called by the functor
doesn't match its context (e.g., the functor is called in an expression where
its return value is compared with a tt(size_t)) then the return type of the
functor can easily be coerced into the appropriate type (of course, provided that the
requested type conversion is possible). In those cases the requested return
type can be specified between angle brackets immediately following
tt(bind). E.g.,
        verb(
    auto ftor = bind<size_t>(sub, _1, 4);   // ftor's return type is size_t
    size_t target = 5;
    if (target < ftor(3))           // -1 becomes a large positive value
        cout << "smaller\n";        // and so 'smaller' is shown.
        )
    Finally, the example given earlier, using tt(bind2nd) can be rewritten
using tt(bind) like this:
        verb(
    using namespace placeholders;
    count_if(vs.begin(), vs.end(), bind(equal_to<string>(), _1, target));
        )
    Here, tt(bind) returns a functor expecting one argument (represented by
tt(_1)) and tt(count_if) will pass the strings in tt(vs) will in sequence to
the functor returned by tt(bind). The second argument (tt(target)) is embedded
inside the functor's implementation, where it is passed as second argument to
the tt(equal_to<string>()) function object.

