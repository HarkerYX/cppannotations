Standard attributes

Only the following attributes are defined by the C++ standard. All other attributes are implementation-specific.

[[noreturn]] 	Indicates that the function does not return.

This attribute applies to function declarations only. The behavior is
undefined if the function with this attribute actually returns.  The following
standard functions have this attribute: std::_Exit, std::abort, std::exit,
std::quick_exit, std::unexpected, std::terminate, std::rethrow_exception,
std::throw_with_nested, std::nested_exception::rethrow_nested

[[carries_dependency]] Indicates that dependency chain in release-consume
std::memory_order propagates in and out of the function, which allows the
compiler to skip unnecessary memory fence instructions.  This attribute may
appear in two situations:

1) it may apply to the parameter declarations of a function or
lambda-expressions, in which case it indicates that initialization of the
parameter carries dependency into lvalue-to-rvalue conversion of that object.

2) It may apply to the function declaration as a whole, in which case it
indicates that the return value carries dependency to the evaluation of the
function call expression.


This attribute must appear on the first declaration of a function or one of
its parameters in any translation unit. If it is not used on the first
declaration of a function or one of its parameters in another translation
unit, the program is ill-formed; no diagnostic required.


See std::kill_dependency for example usage

[[deprecated]](C++14)
[[deprecated("reason")]](C++14) 	Indicates that the use of the name or
entity declared with this attribute is allowed, but discouraged for some
reason. This attribute is allowed in declarations of classes, typedef-names,
variables, non-static data members, functions, enumerations, and template
specializations. A name declared non-deprecated may be redeclared
deprecated. A name declared deprecated cannot be un-deprecated by redeclaring
it without this attribute.




