WIP
===

Historically, the bf(C) programming language distinguished between
em(lvalues) and em(rvalues). The terminology was based on
assignment expressions, where the value to the left of the assignment operator
could receive a value (e.g., it referred to a location in memory where a value
could be written into, like a variable), while the value to the right of the
assignment operator only needed to represent a value (it could be a temporary
variable, a constant value or the value stored in a variable):
        verb(
    lvalue = rvalue;
        )

bf(C++) adds to this basic distinction several new ways of referring to
values: 
    itemization(
    itt(lvalue): an emi(lvalue) in bf(C++) has the same meaning as in
        bf(C). It refers to a location where a value can be stored, like a
        variable, a reference to a variable, or a dereferenced pointer.
    itt(xvalue): an emi(xvalue) indicates an emi(expiring value). An expiring
        value refers to an em(object) (cf. chapter ref(CLASSES)) just before
        its lifetime ends. Resources (like dynamically allocated memory)
        owned by such objects will soon cease to exist as well, and may
        therefore, just before the object's lifetime ends, be moved to another
        location, thus preventing their destruction.
    itt(gvalue): a emi(gvalue) is a emi(generalized lvalue). A generalized
        lvalue refers to anything that may receive a value. It is either an
        lvalue or an xvalue.
    itt(prvalue): a emi(prvalue) is a emi(pure rvalue): a literal value (like
        tt(1.2e3)) or an immutable object (e.g., the value returned from a
        function returning a constant tt(std::string) (cf. chapter
        ref(String)))
    )

    

[ Note: An expression is an xvalue if it is:nl()
   -- the result of calling a function, whether implicitly or explicitly,
whose return type is an rvalue reference to object type,nl()
   -- a cast to an rvalue reference to object type,nl()
   -- a class member access expression designating a non-static data member of
non-reference type in which the object expression is an xvalue, or nl()
   -- a .* pointer-to-member expression in which the first operand is an
xvalue and the second operand is a pointer to data member.  In general, the
effect of this rule is that named rvalue references are treated as lvalues and
unnamed rvalue references to objects are treated as xvalues; rvalue references
to functions are treated as lvalues whether named or not.nl() 
    -- end note ]

 Example:
  struct A {
    int m;
  };
  A&& operator+(A, A);
  A&& f();
  A a;
  A&& ar = static_cast<A&&>(a);
The expressions f(), f().m, static_cast<A&&>(a), and a + a are xvalues. The expression ar is an lvalue.
-- end example ]



