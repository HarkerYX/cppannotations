    In section ref(AUTO) the tt(auto) keyword was introduced. The keyword
tt(decltype), related to tt(auto), shows somewhat different behavior.  This
section concentrates on tt(decltype). Different from tt(auto), which requires
no further specifications, tt(decltype) is always followed by an
expression between parentheses (e.g., tt(decltype(variable))).

    As an initial illustration, assume we have a function defining a parameter
tt(std::string const &text). Inside the function we may encounter the
following two definitions:
        verb(
    auto scratch1{text};
    decltype(text) scratch2 = text;
        )
    With tt(auto) the compiler deduces a plain type, so tt(scratch1) is a
tt(string), and copy construction is used to initialize it from
`tt(text)'. 

    Now consider tt(decltype): tt(decltype) determines tt(text's) type:
tt(string const &), which is thereupon used as tt(scratch2's) type: tt(string
const &scratch2), referring to whatever string tt(text) refers to. This is
tt(decltype's) standard behavior: when provided with a variable's name,
it is replaced by that variable's type.

Alternatively, tt(decltype) can be provided with an expression. Of course, a
variable by itself also is an expression, but in the context of tt(decltype)
we define an `expression' as any expression that is more complex than just a
plain variable specification. It may be as simple as tt((variable)), the
name of a variable between parentheses.

When an expression is used, the compiler determines whether the expression's
type could be interpreted as an lvalue reference. If so,
tt(decltype(expression)) is replaced by the type of that lvalue reference. If
not, tt(decltype(expression)) is replaced by the expression's plain type.

    Here are some examples:
    verb(
    int *ptr;
    decltype(ptr) ref = ptr;
        // decltype's argument is a plain variable, so
        // ptr's type is used: int *ref = ptr (resulting in
        // two warnings about not-initialized/used variables).
        // decltype(ptr) is replaced by int *.

    int *ptr;
    decltype( (ptr) ) ref = ptr;
        // the expression `int *&ref = ptr' is OK. 
        // so decltype( (ptr))  is replaced by int *&

    int value;
    decltype(value + value) 
        // decltype's argument is an expression, so
        // the expression `int &ref = value + value is NOT OK 
        // decltype(...) is replaced by int (i.e., value + value's type)
    
    string lines[20];
    decltype(lines[0]) ref = lines[6];
        // decltype's argument is an expression, so
        // the expression string &ref = lines[6] is OK
        // decltype(...) is replaced by string &

    string &&strRef = string{};
    decltype(strRef) ref = std::move(strRef);
        // decltype's argument is a variable
        // the expression string &&ref = std::move(strRef) is OK
        // decltype(...) is replaced by strRef's type: string &&

    decltype((strRef)) ref2 = strRef
        // decltype's argument is an expression, so
        // string && &ref = strRef becomes
        // string &ref = strRef which is OK
        // decltype is replaced by string &
    )


    In addition to this, ti(decltype(auto)) specifications can be used, in
which case tt(decltype's) rules are applied to tt(auto). So, tt(auto) is used
to determine an object's basic type. Then, if the expression is a mere
variable, the variable's type is the object's basic type, otherwise, if the
exoression can be assigned to an lvalue then tt(decltype(auto)) is replaced by
a reference to the object's basic type. Here are some examples:
    verb(
    int *ptr;
    decltype(auto) ptr2 = ptr     
        auto produces int *, ptr is a plain variable
        decltype(auto) is replaced by int *

    int value;
    decltype(auto) ret = value + value;
        auto produces int, value + value: not assignable to lvalue 
        decltype(auto) is replaced by int
    
    string lines[20];
    decltype(auto) line = lines[0];
        auto produces string, lines[0] assignable to lvalue 
        decltype(auto) is replaced by string &

    decltype(auto) ref = string{} 
        auto produces string, string{} not assignable to lvalue
        decltype(auto) is replaced by string

    decltype((strRef)) 
        string &ref = strRef is OK
        decltype is replaced by string &
    )


    In practice, the tt(decltype(auto)) form is most often encountered with
function templates to define their return types. Have a look at the following
struct definition (not using function templates, but illustrating the workings
of tt(decltype(auto))):
        verb(
    struct Data
    {
        vector<string> d_vs;
        string *d_val = new string[10];
    
        Data()
        :
            d_vs(1)
        {}
    
        auto autoFun() const
        {
            return d_val[0];
        }

        decltype(auto) declArr() const       
        {
            return d_val[0];
        }

        decltype(auto) declVect() const
        {
            return d_vs[0];
        }
    };
        )
    itemization(
    it() The member tt(autoFun) returns tt(auto): tt(d_val[0]) is passed to
tt(auto), deducing tt(string). So the function's signature equals tt(string
autoFun() const).
    it() The member tt(declArr) returns tt(decltype(auto)): passing
tt(d_val[0]) to tt(auto) produces tt(string). Since tt(d_val[0]) is not a
named variable, but can be assigned to an lvalue, the function's siganture
equals tt(string &declArr() const).
    it() The member tt(declVect) returns tt(decltype(auto)): passing
tt(d_vs[0]) to tt(auto) produces tt(string). Again tt(d_vs[0]) is not a
named variable, but can be assigned to an lvalue. However, since
tt(declVect) is a const member, this reference must be a tt(string const &),
ans so the function's siganture equals tt(string const &declVect() const).
    )
    If you're wondering why it is tt(string &declArr() const) but tt(string
const &declVect() const) then define reference members in these two functions:
tt(string &ref = d_val[0]) is OK in tt(declArr), but tt(string &ref = d_vs[0])
does not compile in tt(declVect): since tt(d_vs) is itself an object, its
tt(operator[]) returns a tt(string const &) when called from a const member
function. Hence, tt(decltype(auto) declVect() const) returns a tt(string const
&) rather than a tt(string &).


